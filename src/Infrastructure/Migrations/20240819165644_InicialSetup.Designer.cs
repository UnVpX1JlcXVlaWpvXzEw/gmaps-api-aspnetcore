// <auto-generated />
using System;
using GMapsMagicianAPI.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GMapsMagicianAPI.Infrastructure.Migrations
{
    [DbContext(typeof(GMapsMagicianAPIDBContext))]
    [Migration("20240819165644_InicialSetup")]
    partial class InicialSetup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("GMapsMagicianAPI.Domain.AgregateModels.Query.Enums.QueryStatusHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModificationDate")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("QueryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ScrapingConclusionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("UUId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("QueryId");

                    b.HasIndex("UUId")
                        .IsUnique();

                    b.ToTable("QueryStatusHistory", (string)null);
                });

            modelBuilder.Entity("GMapsMagicianAPI.Domain.AgregateModels.Query.Query", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ActiveScraper")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GMapsSearchLink")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsInstant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ModificationDate")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RawQuery")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UUId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UUId")
                        .IsUnique();

                    b.ToTable("Query", (string)null);
                });

            modelBuilder.Entity("GMapsMagicianAPI.Domain.AgregateModels.Query.QueryResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("ModificationDate")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("QueryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("UUId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("QueryId");

                    b.HasIndex("UUId")
                        .IsUnique();

                    b.ToTable("QueryResult", (string)null);
                });

            modelBuilder.Entity("GMapsMagicianAPI.Domain.AgregateModels.Query.QueryResultStatusHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModificationDate")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("QueryResultId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ScrapingConclusionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("UUId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("QueryResultId");

                    b.HasIndex("UUId")
                        .IsUnique();

                    b.ToTable("QueryResultStatusHistory", (string)null);
                });

            modelBuilder.Entity("GMapsMagicianAPI.Domain.AgregateModels.Query.Enums.QueryStatusHistory", b =>
                {
                    b.HasOne("GMapsMagicianAPI.Domain.AgregateModels.Query.Query", null)
                        .WithMany("StatusHistory")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GMapsMagicianAPI.Domain.AgregateModels.Query.QueryResult", b =>
                {
                    b.HasOne("GMapsMagicianAPI.Domain.AgregateModels.Query.Query", null)
                        .WithMany("QueryResults")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GMapsMagicianAPI.Domain.AgregateModels.Query.QueryResultStatusHistory", b =>
                {
                    b.HasOne("GMapsMagicianAPI.Domain.AgregateModels.Query.QueryResult", null)
                        .WithMany("ResultStatusHistory")
                        .HasForeignKey("QueryResultId");
                });

            modelBuilder.Entity("GMapsMagicianAPI.Domain.AgregateModels.Query.Query", b =>
                {
                    b.Navigation("QueryResults");

                    b.Navigation("StatusHistory");
                });

            modelBuilder.Entity("GMapsMagicianAPI.Domain.AgregateModels.Query.QueryResult", b =>
                {
                    b.Navigation("ResultStatusHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
